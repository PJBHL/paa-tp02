package Components;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AnimacaoCaminhao extends JPanel {
    private List<Point> lojas; // Lista de coordenadas das lojas
    private javax.swing.Timer timer; // Timer para atualização da animação
    private int caminhaoX; // Coordenada X do caminhão
    private int caminhaoY; // Coordenada Y do caminhão
    private int produtosCarregados; // Contador de produtos carregados

    private Map<Point, String> lojasIdentificadores; // Mapa de identificadores das lojas

    public AnimacaoCaminhao() {
        lojas = new ArrayList<>();
        timer = new javax.swing.Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                atualizarAnimacao();
            }
        });
        caminhaoX = 50; // Coordenada inicial do caminhão
        caminhaoY = 50;
        produtosCarregados = 0;

        lojasIdentificadores = new HashMap<>();

        timer.start();
    }

    private void atualizarAnimacao() {
        if (!lojas.isEmpty()) {
            Point proximaLoja = lojas.remove(0);
            int destinoX = (int) proximaLoja.getX();
            int destinoY = (int) proximaLoja.getY();

            // Movimenta o caminhão em direção à próxima loja
            if (caminhaoX < destinoX) {
                caminhaoX += 5;
            } else if (caminhaoX > destinoX) {
                caminhaoX -= 5;
            }

            if (caminhaoY < destinoY) {
                caminhaoY += 5;
            } else if (caminhaoY > destinoY) {
                caminhaoY -= 5;
            }

            // Verifica se chegou na próxima loja
            if (caminhaoX == destinoX && caminhaoY == destinoY) {
                // Carrega um produto no caminhão
                produtosCarregados++;

                // Remove a loja da lista de lojas
                lojasIdentificadores.remove(proximaLoja);

                // Verifica se ainda há lojas a serem visitadas
                if (lojas.isEmpty()) {
                    timer.stop(); // Interrompe a animação
                }
            }

            repaint(); // Redesenha a animação
        }
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);

        // Desenha as lojas e identificadores
        for (Map.Entry<Point, String> entry : lojasIdentificadores.entrySet()) {
            Point loja = entry.getKey();
            String identificador = entry.getValue();

            int x = (int) loja.getX();
            int y = (int) loja.getY();

            // Desenha identificador da loja
            g.setColor(Color.BLACK);
            g.drawString(identificador, x, y);

            // Desenha a loja
            g.setColor(Color.RED);
            g.fillOval(x - 5, y - 5, 10, 10);
        }

        // Desenha o caminhão
        g.setColor(Color.BLUE);
        g.fillRect(caminhaoX - 10, caminhaoY - 10, 20, 20);

        // Desenha o contador de produtos carregados
        g.setColor(Color.BLACK);
        g.drawString("Produtos Carregados: " + produtosCarregados, 10, 20);
    }

    public void adicionarLoja(Point coordenadas, String identificador) {
        lojas.add(coordenadas);
        lojasIdentificadores.put(coordenadas, identificador);
    }

    public void iniciarAnimacao() {
        timer.start();
    }

    public void interromperAnimacao() {
        timer.stop();
    }
}